name: EduNet

on:
  push:
    branches:
      - '*'
  pull_request:
    branches:
      - main

jobs:
  test:
    runs-on: ${{ matrix.os }}
    env:
      ACTIONS_STEP_DEBUG: true
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        python-version: ["3.9", "3.10", "3.11", "3.12"]
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install poetry
        run: |
          python -m pip install --upgrade pip
          python -m pip install poetry

      - name: Install project dependencies
        run: |
          poetry install


      - name: Get Python version for tox
        run: |
          stripped_py_version=$(echo "${{ matrix.python-version }}" | tr -d '.')
          echo "py_version=$stripped_py_version" >> $GITHUB_ENV
        id: py_version

      - name: Run tests
        env:
          SKIP_LOAD_TEST: "true"
        run: |
          poetry run tox -e py${{ env.py_version }}

      - name: Upload coverage reports to Codecov
        if: github.ref == 'refs/heads/main'  # Only run this step if it's the main branch
        uses: codecov/codecov-action@v4.0.1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          slug: idjaw/edunet

  build:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    strategy:
      matrix:
        os: [ubuntu-latest]
        python-version: ["3.11"]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install poetry
        run: |
          python -m pip install --upgrade pip
          python -m pip install poetry

      - name: Install project dependencies
        run: |
          poetry install

      - name: Package application
        run: |
          poetry build

      - name: Archive distributable package
        uses: actions/upload-artifact@v4
        with:
          name: distributable-package
          path: dist/

  deploy:
    runs-on: ubuntu-latest
    needs: [build, test]
    strategy:
      matrix:
        os: [ubuntu-latest]
        python-version: ["3.11"]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download distributable package
        uses: actions/download-artifact@v4
        with:
          name: distributable-package
          path: dist

      - name: Install Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install poetry
        run: |
          python -m pip install --upgrade pip
          python -m pip install poetry

      - name: Publish the package with poetry
        env:
          API_TOKEN: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          poetry config pypi-token.pypi "$API_TOKEN"
          poetry publish

      - name: Get version
        run: |
          echo "version=$(poetry version -s)" >> $GITHUB_ENV
        id: version

      - name: Create and push tag
        run: |
          git config user.name "GitHub Actions"
          git config user.email "github-actions@users.noreply.github.com"
          git tag -a ${{ env.version }} -m "release for ${{ env.version }}"
          git push origin ${{ env.version }}
